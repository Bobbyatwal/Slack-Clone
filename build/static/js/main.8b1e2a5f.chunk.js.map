{"version":3,"sources":["StateProvider.js","Header.js","firebase.js","SidebarOption.js","Sidebar.js","Message.js","ChatInput.js","Chat.js","reducer.js","Login.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Header","user","className","Avatar","alt","displayName","src","photoURL","placeholder","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarOption","Icon","title","id","addChannelOption","history","useHistory","onClick","channelName","prompt","collection","add","name","push","Sidebar","useState","channels","setChannels","useEffect","onSnapshot","snapshot","docs","map","doc","data","InsertCommentIcon","InboxIcon","DraftsIcon","BookmarkBorderIcon","PeopleAltIcon","AppsIcon","FileCopyIcon","ExpandLessIcon","ExpandMoreIcon","AddIcon","channel","Message","message","timestamp","userImage","Date","toDate","toUTCString","ChatInput","channelId","input","setInput","onChange","e","target","toLowerCase","type","preventDefault","FieldValue","serverTimestamp","Chat","roomId","useParams","roomDetails","setRoomDetails","roomMessages","setRoomMessages","orderBy","actionTypes","state","action","Login","dispatch","Button","signInWithPopup","then","result","catch","error","alert","Homepage","href","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8b1e2a5f.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\n//Children is this ]entire app being wrapped by StateContextProvider\n//StateContext is the DataLayer\n//Goal is to push  info into DataLayer and pull it from wherever we are in the app\n//We can store anything in the DataLayer and use anywhere \n//Pass a value the the Reducer which takes Initial State and Reducer\n//Reducer = Where the listening happens. Listens to any kind of action you shoot at the DataLayer. \n//Initial State = What data layer looks like before we do anything to it\n\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\n\n//Our own hook that allows us to use values from the DataLayer\n// Access & PUll data from DataLayer:\nexport const useStateValue = () => useContext(StateContext);\n\n\n\n","import React from \"react\";\nimport \"./Header.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Header() {\n  const [{ user }] = useStateValue();\n\n  return (\n    <div className=\"header\">\n      <div className=\"header__left\">\n        <Avatar\n          className=\"header__avatar\"\n          alt={user?.displayName}\n          src={user?.photoURL}\n        />\n        <AccessTimeIcon />\n      </div>\n      <div className=\"header__search\">\n        <SearchIcon />\n        <input placeholder=\"Search Drip Developer!\" />\n      </div>\n      <div className=\"header__right\">\n        <HelpOutlineIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import firebase from \"firebase\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDTdX7Xn3C9jahjrPBp0r6jkcGl-qLvcUs\",\n  authDomain: \"bobbyatwal-slack-clone.firebaseapp.com\",\n  databaseURL: \"https://bobbyatwal-slack-clone.firebaseio.com\",\n  projectId: \"bobbyatwal-slack-clone\",\n  storageBucket: \"bobbyatwal-slack-clone.appspot.com\",\n  messagingSenderId: \"161305319639\",\n  appId: \"1:161305319639:web:8dae025d44cbc8519b7892\",\n  measurementId: \"G-ENK2YV1YPB\",\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import React from \"react\";\nimport \"./SidebarOption.css\";\nimport { useHistory } from \"react-router-dom\";\nimport db from \"./firebase\";\nfunction SidebarOption({ Icon, title, id, addChannelOption }) {\n  // Powerful React Router Hook - when you click, browser has history so we are forcing a re-direct. Pushing next page into history\n  const history = useHistory();\n\n  //Using the Id, we change the URL which will render a different room\n  const selectChannel = () => {\n    if (id) {\n      history.push(`/room/${id}`);\n    } else {\n      history.push(title);\n    }\n  };\n  //Add Channel option. presents a prompt and stores the new channel into the databse to render\n  const addChannel = () => {\n    const channelName = prompt(\"Please enter the Channel name\");\n\n    if (channelName) {\n      db.collection(\"rooms\").add({\n        name: channelName,\n      });\n    }\n  };\n  // Function that pulls Icons, titles, and hashtags for the Sidebar\n  return (\n    <div\n      className=\"sidebarOption\"\n      onClick={addChannelOption ? addChannel : selectChannel}\n    >\n      {Icon && <Icon className=\"sidebarOption__icon\" />}\n      {Icon ? (\n        <h3>{title}</h3>\n      ) : (\n        <h3 className=\"sidebarOption__channel\">\n          <span className=\"sideOption_hash\"> # </span> {title}\n        </h3>\n      )}\n    </div>\n  );\n}\n\nexport default SidebarOption;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport SidebarOption from \"./SidebarOption\";\nimport InsertCommentIcon from \"@material-ui/icons/InsertComment\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nfunction Sidebar() {\n  const [channels, setChannels] = useState([]);\n  const [{ user }] = useStateValue();\n  //Grabs room info from the firestore db through the URL\n  //Takes a snapshot and pulls elemnts into an array then maps (grabs and assigns) the room id and names\n  useEffect(() => {\n    db.collection(\"rooms\").onSnapshot((snapshot) =>\n      setChannels(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          name: doc.data().name,\n        }))\n      )\n    );\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <div className=\"sidebar__info\">\n          <h2>Drip Developer </h2>\n          <h3>\n            <FiberManualRecordIcon />\n            {user?.displayName}\n          </h3>\n        </div>\n        <CreateIcon />\n      </div>\n      <SidebarOption Icon={InsertCommentIcon} title=\"Threads\" />\n      <SidebarOption Icon={InboxIcon} title=\"Mentions & reactions\" />\n      <SidebarOption Icon={DraftsIcon} title=\"Saved items\" />\n      <SidebarOption Icon={BookmarkBorderIcon} title=\"Channel browser\" />\n      <SidebarOption Icon={PeopleAltIcon} title=\"People & user groups\" />\n      <SidebarOption Icon={AppsIcon} title=\"Apps\" />\n      <SidebarOption Icon={FileCopyIcon} title=\"File browser\" />\n      <SidebarOption Icon={ExpandLessIcon} title=\"Show Less\" />\n      <hr />\n      <SidebarOption Icon={ExpandMoreIcon} title=\"Channels\" />\n      <hr />\n      <SidebarOption Icon={AddIcon} addChannelOption title=\"Add Channel\" />\n\n      {\n        // Function to assign a name and ID to each channel / \"room\" from the DB\n        channels.map((channel) => (\n          <SidebarOption title={channel.name} id={channel.id} />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./Message.css\";\n// Messaging function to display in Channels\nfunction Message({ message, timestamp, user, userImage }) {\n  return (\n    <div className=\"message\">\n      <img src={userImage} alt=\"\" />\n      <div className=\"message__info\">\n        <h4>\n          {user}\n\n          <span className=\"message__timestamp\">\n            {/* Cool way to display time nicely*/}\n            {new Date(timestamp?.toDate()).toUTCString()}\n          </span>\n        </h4>\n        <p>{message}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import React, { useState } from \"react\";\nimport db from \"./firebase\";\nimport \"./ChatInput.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport firebase from \"firebase\";\n\n//Keep track of what user inputting:\nfunction ChatInput({ channelName, channelId }) {\n  const [input, setInput] = useState(\"\");\n  const [{ user }] = useStateValue();\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    // Grabbing Messages from DB to display in specific room\n    if (channelId) {\n      db.collection(\"rooms\").doc(channelId).collection(\"messages\").add({\n        message: input,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        user: user.displayName,\n        userImage: user.photoURL,\n      });\n    }\n\n    setInput(\"\");\n  };\n  // Inputting Messages into the App\n  return (\n    <div className=\"chatInput\">\n      <form>\n        <input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder={`Message #${channelName?.toLowerCase()}`}\n        />\n        <button type=\"submit\" onClick={sendMessage}>\n          SEND\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ChatInput;\n","import React from \"react\";\nimport \"./Chat.css\";\nimport { useParams } from \"react-router-dom\";\nimport StarBorderOutlinedIcon from \"@material-ui/icons/StarBorderOutlined\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport db from \"./firebase\";\nimport { useState, useEffect } from \"react\";\nimport Message from \"./Message\";\nimport ChatInput from \"./ChatInput\";\n\nfunction Chat() {\n  //RoomID parameter from the URL (in App.js) & useParams hook \n  const { roomId } = useParams();\n  const [roomDetails, setRoomDetails] = useState(null);\n  const [roomMessages, setRoomMessages] = useState([]);\n  // RoomId is local so we are providing the db with the exact roomID through the custom URL\n  //If roomId exists, go to the rooms collection & grab the roomId based on the URL that was clicked\n  //to access that particular document as snapshot stores all its info. dependency @end changes everytime ID changes\n  useEffect(() => {\n    if (roomId) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .onSnapshot((snapshot) => setRoomDetails(snapshot.data()));\n    }\n\n    db.collection(\"rooms\")\n      .doc(roomId)\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"asc\")\n      .onSnapshot((snapshot) =>\n        setRoomMessages(snapshot.docs.map((doc) => doc.data()))\n      );\n  }, [roomId]);\n  // console.log(\"Room Channel we are currently in:\",roomDetails);\n  // console.log(\"MESSAGES>>>\", roomMessages);\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <div className=\"chat__headerLeft\">\n          <h4 className=\"chat__channelName\">\n            {/* We click the link, it changes the URL, connects to DB, uses the URLparam(roomID) to fetch\n            the room details from the DB. Below is the name being displayed on top.    */}\n            <strong> #{roomDetails?.name}</strong>\n            <StarBorderOutlinedIcon />\n          </h4>\n        </div>\n        <div className=\"chat__headerRight\">\n          <p>\n            <InfoOutlinedIcon /> Details\n          </p>\n        </div>\n      </div>\n{/* Creates ability to message  in each Channel */ }\n      <div className=\"chat__messages\">\n        {roomMessages.map(({ message, timestamp, user, userImage }) => (\n          <Message\n            message={message}\n            timestamp={timestamp}\n            user={user}\n            userImage={userImage}\n          />\n        ))}\n      </div>\n\n      <ChatInput channelName={roomDetails?.name} channelId={roomId} />\n    </div>\n  );\n}\n\nexport default Chat;\n","//Listens to any action that gets fired into the DataLayer\n\n//Create the initial State:\n\nexport const initialState = {\n  user: null,\n};\n\nexport const actionTypes = {\n  SET_USER: \"SET_USER\",\n};\n// State is what the DataLayer Looks like and action is what we are trying to do (like push info, set user, etc.)\nconst reducer = (state, action) => {\n  //Listen to the DataLayer --> actionType for example SET_USER:\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      //Return the current state it was in & modify the new user\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\n\nfunction Login() {\n  const [state, dispatch] = useStateValue();\n\n  // push the user info into our DataLayer once Authenticated their credentials\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        dispatch({\n          type: actionTypes.SET_USER,\n          user: result.user,\n        });\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <img\n          src=\"https://cdn.mos.cms.futurecdn.net/SDDw7CnuoUGax6x9mTo7dd.jpg\"\n          alt=\"\"\n        />\n\n        <h1>Sign in to Drip Developer HQ</h1>\n        <p>DripDeveloper.com</p>\n        <Button onClick={signIn}>Sign In with Google</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport \"./Homepage.css\";\n\nfunction Homepage() {\n    return (\n       \n            <div className=\"homepage\">\n                    <h1>Welcome to my Slack Application Clone </h1>\n                    <h1 className=\"border\" >\n                      Visit my Portfolio:{\" \"}\n                      <a href=\"http://DripDeveloper.com\" target=\"_blank\">\n                        {\" \"}\n                        Drip Developer\n                      </a>\n                    </h1>\n\n                    <p>\n                      <ul>\n                        Below is a list of technology used in this application:\n                        <li>ReactJS</li>\n                        <li>Google User Authentication</li>\n                        <li>Material-UI</li>\n                        <li>React Context API</li>\n                        <li>React Router</li>\n                        <li>Firebase Real-time Database</li>\n                        <li>CSS Variables</li>\n                        <li>Flexbox</li>\n                      </ul>\n                    </p>\n                  </div>\n       \n    )\n}\n\nexport default Homepage;\n","import React from \"react\";\nimport \"./app.css\";\nimport Header from \"./Header\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\nimport Homepage from \"./Homepage\";\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <Login />\n        ) : (\n          <>\n            <Header />\n            <div className=\"app__body\">\n              <Sidebar />\n              <Switch>\n                <Route path=\"/room/:roomId\">\n                  <Chat />\n                </Route>\n\n                <Route path=\"/\">\n                  <Homepage />\n                </Route>\n              </Switch>\n            </div>\n          </>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}